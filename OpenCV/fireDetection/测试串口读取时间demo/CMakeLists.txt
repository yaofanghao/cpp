cmake_minimum_required(VERSION 3.1)
set(CMAKE_SYSTEM_NAME Linux)
#if(TARGET_ARCH_ABI STREQUAL "armv8")
#    set(CMAKE_SYSTEM_PROCESSOR aarch64)
#    set(CMAKE_C_COMPILER "aarch64-linux-gnu-gcc")
#    set(CMAKE_CXX_COMPILER "aarch64-linux-gnu-g++")
#elseif(TARGET_ARCH_ABI STREQUAL "armv7l")
#    set(CMAKE_SYSTEM_PROCESSOR arm)
#    set(CMAKE_C_COMPILER "arm-linux-gnueabihf-gcc")
#    set(CMAKE_CXX_COMPILER "arm-linux-gnueabihf-g++")
#else()
#    message(FATAL_ERROR "Unknown arch abi ${TARGET_ARCH_ABI}, only support armv8 and armv7hf.")
#    return()
#endif()

project( test )

# 包含OpenCVconfig.cmake的路径
# set(OpenCV_DIR E:\\OpenCV\\opencv\\build)

message(STATUS "TARGET ARCH ABI: ${TARGET_ARCH_ABI}")
message(STATUS "OpenCV_INCLUDE_DIRS: ${OpenCV_INCLUDE_DIRS}")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
if(TARGET_ARCH_ABI STREQUAL "armv8")
    set(CMAKE_CXX_FLAGS "-march=armv8-a ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-march=armv8-a ${CMAKE_C_FLAGS}")
elseif(TARGET_ARCH_ABI STREQUAL "armv7l")
    set(CMAKE_CXX_FLAGS "-march=armv7-a -mfloat-abi=hard -mfpu=neon-vfpv4 ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-march=armv7-a -mfloat-abi=hard -mfpu=neon-vfpv4 ${CMAKE_C_FLAGS}" )
endif()

# find_package(OpenCV REQUIRED) 
# if(OpenCV_FOUND OR OpenCV_CXX_FOUND)
#     include_directories(${OpenCV_INCLUDE_DIRS})
#     message(STATUS "OpenCV library status:")
#     message(STATUS "    version: ${OpenCV_VERSION}")
#     message(STATUS "    libraries: ${OpenCV_LIBS}")
#     message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")
# else()
#     message(FATAL_ERROR "Could not found OpenCV!")
#     return()
# endif()

include_directories(${PROJECT_SOURCE_DIR}/external_module)
add_subdirectory (external_module) 
add_executable(test main.cpp)

target_link_libraries(test external_module)

