1.struct {                            struct {
    int a;                                    int a;
    char b;                                   char b;
    float c;                                  float c;
  } y[20], *z;                        } x;
  以上连个声明虽然成员列表完全相同，但是y，z和x属于不同的类型，所以，
  z = &x;是非法的。
2.为了使y，z和x属于同一个类型，可以使用一下两种方法进行声明：
  1)typedef struct {
    int a;
    char b;
    float c;
  } Simple;
  Simple x;
  Simple y[20], *z;
  2)struct Simple {
    int a;
    char b;
    float c;
  };
  struct Simple x;
  strcut Simple y[20], *z;
3.typedef struct {
  int a;
  SELF_REF3* b;
  int c;
} SELF_REF3;错误，类型名直到末尾才定义，在声明的内部尚未定义。
可以用一个标签来解决这个问题：
typedef struct SELF_REF3_TAG {
  int a;
  struct SELF_REF3_TAG *b;
  int c;
} SELF_REF3;
4.不完整声明
  struct B;
  struct A{
    struct B *partner;
  };
  struct B{
   struct A *partner;
  };
5.结构变量可以用花括号来初始化变量，这些值的类型必须符合初始化的成员，如果初始化
列表的值不够，剩余的值按照默认值初始化。
6.在实现结构存储的边界的对齐时，可能会浪费一部分空间。根据边界对齐要求降序排列
成员可最大限度的减少结构中浪费的空间。
7.sizeof返回的值包含结构中浪费的空间。
8.宏offsetof( type， member )表示指定成员开始存储的位置距离结构开始存储位置
几个字节。
9.向一个函数传递结构指针效率更高（除了结构特别小的情况下），通常添加一个const
防止函数修改指针指向的内容。
10.位段的不同之处：
    位段成员必须声明为int、signed int或者unsigned int类型（显示的声明int到底是
    unsigned还是signed是有好处，因为int类型到底是unsigned还是signed是由编译器决
    定的
    成员名后跟一个：和一个整数，该整数指定该位段占用的位的数目
    位段的可移植性不太好，原因如下：
     int位段被当做unsigned还是signed由编译器决定
     许多编译器把位段长度限制在一个整型长度之内
     位段的成员是从左网右分配还是从右往左分配是由编译器决定的
     当指定了两个位段的时候，第二个位段比较长无法容纳于第一个位段所剩余的位，编译器
     可能把第二个位段放到下一个字，也可能把放到第一个位段之后
    使用位段的好处：
     节省内存空间
     可以方便的访问一个整型值的部分内容
    例子:
    struct DISK_REGISTER_FORMAT {
        unsigned comand  :5;
        unsigned serctor :5;
    };
    
    #define DISK_REGISTER    \ 
            (struct DISK_REGISTER_FORMAT *)0xc0000220
    DISK_REGISTER->serctor = ....
    
11.一个联合的素有成员存储在一个内存位置，某一时刻联合中的字段只有一个被使用，联合
的长度就是最长的成员的长度。在实现变体记录的时候特别有用，可以通过一个枚举类型来标
明属于哪种变体。联合的初始化必须是第一个成员类型。
12.现在右一个指针p指向某一结构体，考虑如下的情况：
  1)p做左值时，p表示存储这个结构体的地址的内存位置，p+1不是合法的左值，因为其值并
  不存储于任何可标示的内存位置。
  2)p做右值时，p表示表示这个结构体的地址，p+1不是合法的右值，因为无法分辨内存的下
  一个位置所存储的是这些结构的元素还是其他东西。
  3)*p做右值时，*p表示p所指向的整个结构体，
  4)*p做左值时，*p表示p所指向的整个结构体的内存位置
  5)*p+1和*(p+1)是非法的，前者是因为*p是一个结构体，但是结构体并没有规定加1操作；
  后者p+1是一个标量，不能进行加减操作。
