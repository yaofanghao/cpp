1.int f()[]和int f[]() 为非法声明
2.int *( *f )() 函数指针
3.int (* f[] ) () 函数指针，它所指向的是函数的返回值是一个整数
  int *(* f[] ) () 函数指针，它所指向的是函数的返回值是一个指向整数的指针
4.函数指针的应用：回调函数和转移表

 回调函数：讲一个函数指针作为参数传递给一个函数，则这个函数被称为回调函数
 这样可以创建一个通用型函数，通常将这个函数指针的参数类型设置为void，然后在函数中进行强制类型转换。
 回调函数的使用场景：函数需要执行不同类型的工作或者执行只能够由函数调用者执行的工作，可在函数参数
 中传入函数指针作为回调函数
 一般回调函数参数设置为void类型，在回调函数内部使用参数之前，一定要做强制类型转换

 转换表：一个函数指针类型的数组，通过下标来调用不同的函数(格式：数组名[下标]参数列表)，注意检查
 数组操作是否越界，下标是否合法。

5.字符串常量是一个常量指针，指向字符串的第一个字符，和数组名一样可以使用指针表达式和下标表达式
  来使用字符串常量。如下：
  "xyz" + 1 表示指向y的指针
  *"xyz"  表示x
  "xyz"[2] 表示z
6.argv指向一个序列的字符型指针，该序列以一个NULL指针作为结束标志。

7.只有在需要的时候才会使用多层间接访问，否则程序将会变得很很慢并且很难于维护

6.声明以个函数指针并不意味着马上可以使用，需要将其初始化使其指向某一个指针，在初始化之前需要有
目标函数的函数原型

7.函数指针的声明与使用：
int f ( int );
int ( *pf )( int ) = &f;//&可以不使用
int ans;
ans = f( 25 )
ans = (*pf)( 25 )
ans = pf( 25 )

8.利用字符串的特性提高效率，例如：
   putchar("0123456789ABCDEF"[ value % 16 ]);
   printf( "%s\n", "**********" + 10 - n );
